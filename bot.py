import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery
)
import aiosqlite
from config import BOT_TOKEN, ADMIN_ID, GROUP_LINK, MAX_PARTICIPANTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CONTEST_ENDED = False
CURRENT_PARTICIPANTS = 0

def extract_channel_username():
    """–ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞ –∏–∑ GROUP_LINK"""
    if GROUP_LINK.startswith("https://t.me/"):
        return GROUP_LINK.split('/')[-1].replace('@', '')
    elif GROUP_LINK.startswith("@"):
        return GROUP_LINK[1:]
    return GROUP_LINK.replace('@', '')

async def get_channel_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
    try:
        username = extract_channel_username()
        chat = await bot.get_chat(f"@{username}")
        
        info = {
            'chat_id': chat.id,
            'username': username,
            'type': chat.type
        }
        
        # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        if hasattr(chat, 'members_count'):
            info['members_count'] = chat.members_count
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        else:
            info['members_count'] = await bot.get_chat_member_count(chat.id)
            
        return info
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)}"
        logger.error(error_msg)
        await notify_admin(error_msg)
        return None

async def get_chat_members_count():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    channel_info = await get_channel_info()
    return channel_info.get('members_count', 0) if channel_info else 0

async def is_user_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        channel_info = await get_channel_info()
        if not channel_info:
            return False
            
        member = await bot.get_chat_member(channel_info['chat_id'], user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect("contest.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS contest_settings (
                key TEXT PRIMARY KEY,
                value TEXT
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS participants (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                referrals INTEGER DEFAULT 0,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS referrals (
                referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
                referrer_id INTEGER,
                user_id INTEGER UNIQUE,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (referrer_id) REFERENCES participants(user_id)
            )
        """)
        await db.execute(
            "INSERT OR IGNORE INTO contest_settings (key, value) VALUES (?, ?)",
            ("contest_ended", "false")
        )
        await db.commit()

async def check_contest_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    async with aiosqlite.connect("contest.db") as db:
        cursor = await db.execute(
            "SELECT value FROM contest_settings WHERE key = 'contest_ended'"
        )
        result = await cursor.fetchone()
        return result and result[0] == "true"

async def end_contest():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    async with aiosqlite.connect("contest.db") as db:
        await db.execute(
            "UPDATE contest_settings SET value = 'true' WHERE key = 'contest_ended'"
        )
        await db.commit()
    global CONTEST_ENDED
    CONTEST_ENDED = True
    await notify_admin("üèÜ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")

async def check_participants_limit():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    global CURRENT_PARTICIPANTS, CONTEST_ENDED
    
    if CONTEST_ENDED:
        return True
        
    CURRENT_PARTICIPANTS = await get_chat_members_count()
    
    if CURRENT_PARTICIPANTS >= MAX_PARTICIPANTS:
        await end_contest()
        return True
        
    return False

async def add_participant(user: types.User):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    async with aiosqlite.connect("contest.db") as db:
        await db.execute(
            """INSERT OR IGNORE INTO participants 
               (user_id, username, first_name) 
               VALUES (?, ?, ?)""",
            (user.id, user.username, user.first_name)
        )
        await db.commit()

async def add_referral(referrer_id: int, user_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    async with aiosqlite.connect("contest.db") as db:
        await db.execute(
            "UPDATE participants SET referrals = referrals + 1 WHERE user_id = ?",
            (referrer_id,)
        )
        await db.execute(
            """INSERT OR IGNORE INTO referrals 
               (referrer_id, user_id) 
               VALUES (?, ?)""",
            (referrer_id, user_id)
        )
        await db.commit()

async def get_user_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect("contest.db") as db:
        cursor = await db.execute(
            """SELECT referrals FROM participants 
               WHERE user_id = ?""",
            (user_id,)
        )
        result = await cursor.fetchone()
        return {"referrals": result[0] if result else 0}

async def get_top_referrers(limit: int = 5) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    async with aiosqlite.connect("contest.db") as db:
        cursor = await db.execute(
            """SELECT p.user_id, p.username, p.first_name, p.referrals 
               FROM participants p
               ORDER BY p.referrals DESC 
               LIMIT ?""",
            (limit,)
        )
        return await cursor.fetchall()

def get_subscribe_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    username = extract_channel_username()
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                    url=f"https://t.me/{username}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                    callback_data="check_sub"
                )
            ]
        ]
    )

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
                InlineKeyboardButton(text="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="top_list")
            ],
            [
                InlineKeyboardButton(
                    text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", 
                    switch_inline_query="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å—É!"
                )
            ]
        ]
    )

async def notify_admin(message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        await bot.send_message(ADMIN_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        if await check_participants_limit():
            await message.answer(
                "üèÜ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ú—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - {MAX_PARTICIPANTS}!\n"
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ‚ù§Ô∏è"
            )
            return

        user = message.from_user
        await add_participant(user)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("ref"):
            referrer_id = int(args[1][3:])
            if referrer_id != user.id:
                await add_referral(referrer_id, user.id)
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user.first_name}!\n"
                    f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {(await get_user_stats(referrer_id))['referrals']} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!"
                )

        if not await is_user_subscribed(user.id):
            await message.answer(
                "üì¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {MAX_PARTICIPANTS - CURRENT_PARTICIPANTS}",
                reply_markup=get_subscribe_keyboard()
            )
            return

        bot_username = (await bot.me()).username
        ref_link = f"https://t.me/{bot_username}?start=ref{user.id}"
        
        await message.answer(
            f"üè° <b>–†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ü–∏–π –ü–ò–ö!</b>\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n\n"
            f"üèÜ <b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b>\n"
            f"ü•á 1 –º–µ—Å—Ç–æ: 3 –∞–∫—Ü–∏–∏ –ü–ò–ö (~1,050 —Ä—É–±)\n"
            f"ü•à 2 –º–µ—Å—Ç–æ: 2 –∞–∫—Ü–∏–∏ –ü–ò–ö (~700 —Ä—É–±)\n"
            f"ü•â 3 –º–µ—Å—Ç–æ: 1 –∞–∫—Ü–∏—è –ü–ò–ö (~350 —Ä—É–±)\n\n"
            f"üìå <b>–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n"
            f"‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∞–ª–ª\n\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - CURRENT_PARTICIPANTS}\n"
            f"üìÖ <b>–ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:</b> –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {MAX_PARTICIPANTS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

[–î–û–ë–ê–í–¨–¢–ï –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK_QUERY]

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É
        channel_info = await get_channel_info()
        if not channel_info:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
        bot_user = await bot.get_me()
        member = await bot.get_chat_member(channel_info['chat_id'], bot_user.id)
        if member.status not in ['administrator', 'creator']:
            raise Exception("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!")
        
        await init_db()
        
        await notify_admin(
            "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {GROUP_LINK}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {await get_chat_members_count()}\n"
            f"üèÜ –õ–∏–º–∏—Ç: {MAX_PARTICIPANTS}"
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}"
        logger.error(error_msg)
        await notify_admin(error_msg)
        raise

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    await notify_admin("üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
