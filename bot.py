cat > /root/telegram-bot/bot.py <<'EOL'
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery
)
import aiosqlite
from config import BOT_TOKEN, ADMIN_ID, GROUP_LINK, MAX_PARTICIPANTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CONTEST_ENDED = False
CURRENT_PARTICIPANTS = 0

async def get_chat_members_count():
    """–ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        if GROUP_LINK.startswith("https://t.me/"):
            channel_username = GROUP_LINK.split('/')[-1]
        elif GROUP_LINK.startswith("@"):
            channel_username = GROUP_LINK[1:]
        else:
            channel_username = GROUP_LINK
            
        chat = await bot.get_chat(f"@{channel_username}")
        return await bot.get_chat_member_count(chat.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return 0

async def is_user_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        if GROUP_LINK.startswith("https://t.me/"):
            channel_username = GROUP_LINK.split('/')[-1]
        elif GROUP_LINK.startswith("@"):
            channel_username = GROUP_LINK[1:]
        else:
            channel_username = GROUP_LINK
            
        chat = await bot.get_chat(f"@{channel_username}")
        member = await bot.get_chat_member(chat.id, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==================
def get_subscribe_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    channel_username = GROUP_LINK.replace("https://", "").replace("t.me/", "").replace("@", "")
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                    url=f"https://t.me/{channel_username}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                    callback_data="check_sub"
                )
            ]
        ]
    )

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
                InlineKeyboardButton(text="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="top_list")
            ],
            [
                InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", switch_inline_query="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å—É!")
            ]
        ]
    )

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
@dp.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        if await check_participants_limit():
            await message.answer(
                "üèÜ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ú—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - {MAX_PARTICIPANTS}!\n"
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ‚ù§Ô∏è"
            )
            return

        user = message.from_user
        await add_participant(user)

        args = message.text.split()
        if len(args) > 1 and args[1].startswith("ref"):
            referrer_id = int(args[1][3:])
            if referrer_id != user.id:
                await add_referral(referrer_id, user.id)
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user.first_name}!\n"
                    f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {(await get_user_stats(referrer_id))['referrals']} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!"
                )

        if not await is_user_subscribed(user.id):
            await message.answer(
                "üì¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {MAX_PARTICIPANTS - CURRENT_PARTICIPANTS}",
                reply_markup=get_subscribe_keyboard()
            )
            return

        bot_username = (await bot.me()).username
        ref_link = f"https://t.me/{bot_username}?start=ref{user.id}"
        
        await message.answer(
            f"üè° <b>–†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ü–∏–π –ü–ò–ö!</b>\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n\n"
            f"üèÜ <b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b>\n"
            f"ü•á 1 –º–µ—Å—Ç–æ: 3 –∞–∫—Ü–∏–∏ –ü–ò–ö (~1,050 —Ä—É–±)\n"
            f"ü•à 2 –º–µ—Å—Ç–æ: 2 –∞–∫—Ü–∏–∏ –ü–ò–ö (~700 —Ä—É–±)\n"
            f"ü•â 3 –º–µ—Å—Ç–æ: 1 –∞–∫—Ü–∏—è –ü–ò–ö (~350 —Ä—É–±)\n\n"
            f"üìå <b>–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n"
            f"‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∞–ª–ª\n\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - CURRENT_PARTICIPANTS}\n"
            f"üìÖ <b>–ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:</b> –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {MAX_PARTICIPANTS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            reply_markup=get_main_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback_query: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user = callback_query.from_user
        
        if await is_user_subscribed(user.id):
            await callback_query.message.edit_reply_markup(reply_markup=None)
            bot_username = (await bot.me()).username
            ref_link = f"https://t.me/{bot_username}?start=ref{user.id}"
            
            await callback_query.message.answer(
                f"‚úÖ <b>{user.first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.\n\n"
                f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}",
                reply_markup=get_main_keyboard()
            )
            await callback_query.answer()
        else:
            await callback_query.answer(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª'\n"
                "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
                "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback_query.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@dp.callback_query(F.data == "my_stats")
async def show_stats(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        stats = await get_user_stats(callback_query.from_user.id)
        bot_username = (await bot.me()).username
        ref_link = f"https://t.me/{bot_username}?start=ref{callback_query.from_user.id}"
        
        await callback_query.message.answer(
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üë§ ID: <code>{callback_query.from_user.id}</code>\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{stats['referrals']}</b>\n"
            f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
            f"üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n\n"
            f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - CURRENT_PARTICIPANTS}",
            reply_markup=get_main_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@dp.callback_query(F.data == "top_list")
async def show_top(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        top_users = await get_top_referrers()
        text = "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
        
        if top_users:
            for i, (uid, username, first_name, refs) in enumerate(top_users, 1):
                name = f"@{username}" if username else first_name
                text += f"{i}. {name}: <b>{refs}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        else:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö."
            
        text += f"\n‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - CURRENT_PARTICIPANTS}"
        
        await callback_query.message.answer(
            text,
            reply_markup=get_main_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞: {e}")
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞", show_alert=True)

# ================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==================
async def notify_admin(message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        await bot.send_message(ADMIN_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def scheduled_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    while True:
        try:
            if not CONTEST_ENDED:
                if await check_participants_limit():
                    break
            await asyncio.sleep(3600)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_check: {e}")
            await asyncio.sleep(600)

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await init_db()
    asyncio.create_task(scheduled_check())
    await notify_admin(
        f"ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {GROUP_LINK}\n"
        f"üë• –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {await get_chat_members_count()}\n"
        f"üèÜ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {MAX_PARTICIPANTS}"
    )

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
    await notify_admin("üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
