import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery
)
import aiosqlite
from config import BOT_TOKEN, ADMIN_ID, GROUP_LINK, MAX_PARTICIPANTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

class ContestBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher()
        self.contest_ended = False
        self.current_participants = 0

    @staticmethod
    def extract_channel_username():
        """–ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞"""
        if GROUP_LINK.startswith("https://t.me/"):
            return GROUP_LINK.split('/')[-1].replace('@', '')
        return GROUP_LINK.replace('@', '')

    async def get_channel_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            username = self.extract_channel_username()
            chat = await self.bot.get_chat(f"@{username}")
            return {
                'chat_id': chat.id,
                'username': username,
                'chat': chat
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)}")
            await self.notify_admin(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)}")
            return None

    async def get_chat_members_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            channel_info = await self.get_channel_info()
            if not channel_info:
                return 0
            return await self.bot.get_chat_member_count(channel_info['chat_id'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
            return 0

    async def is_user_subscribed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            channel_info = await self.get_channel_info()
            if not channel_info:
                return False
                
            member = await self.bot.get_chat_member(channel_info['chat_id'], user_id)
            return member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            return False

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with aiosqlite.connect("contest.db") as db:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS contest_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            """)
            await db.execute("""
                CREATE TABLE IF NOT EXISTS participants (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    referrals INTEGER DEFAULT 0,
                    join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            await db.execute("""
                CREATE TABLE IF NOT EXISTS referrals (
                    referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    referrer_id INTEGER,
                    user_id INTEGER UNIQUE,
                    join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (referrer_id) REFERENCES participants(user_id)
                )
            """)
            await db.execute(
                "INSERT OR IGNORE INTO contest_settings (key, value) VALUES (?, ?)",
                ("contest_ended", "false")
            )
            await db.commit()

    async def check_contest_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—É—Ä—Å–∞"""
        async with aiosqlite.connect("contest.db") as db:
            cursor = await db.execute(
                "SELECT value FROM contest_settings WHERE key = 'contest_ended'"
            )
            result = await cursor.fetchone()
            return result and result[0] == "true"

    async def end_contest(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞"""
        async with aiosqlite.connect("contest.db") as db:
            await db.execute(
                "UPDATE contest_settings SET value = 'true' WHERE key = 'contest_ended'"
            )
            await db.commit()
        self.contest_ended = True
        await self.notify_admin("üèÜ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")

    async def check_participants_limit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if self.contest_ended:
            return True
            
        self.current_participants = await self.get_chat_members_count()
        
        if self.current_participants >= MAX_PARTICIPANTS:
            await self.end_contest()
            return True
            
        return False

    async def add_participant(self, user: types.User):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        async with aiosqlite.connect("contest.db") as db:
            await db.execute(
                """INSERT OR IGNORE INTO participants 
                   (user_id, username, first_name) 
                   VALUES (?, ?, ?)""",
                (user.id, user.username, user.first_name)
            )
            await db.commit()

    async def add_referral(self, referrer_id: int, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
        async with aiosqlite.connect("contest.db") as db:
            await db.execute(
                "UPDATE participants SET referrals = referrals + 1 WHERE user_id = ?",
                (referrer_id,)
            )
            await db.execute(
                """INSERT OR IGNORE INTO referrals 
                   (referrer_id, user_id) 
                   VALUES (?, ?)""",
                (referrer_id, user_id)
            )
            await db.commit()

    async def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with aiosqlite.connect("contest.db") as db:
            cursor = await db.execute(
                """SELECT referrals FROM participants 
                   WHERE user_id = ?""",
                (user_id,)
            )
            result = await cursor.fetchone()
            return {"referrals": result[0] if result else 0}

    async def get_top_referrers(self, limit: int = 5) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        async with aiosqlite.connect("contest.db") as db:
            cursor = await db.execute(
                """SELECT p.user_id, p.username, p.first_name, p.referrals 
                   FROM participants p
                   ORDER BY p.referrals DESC 
                   LIMIT ?""",
                (limit,)
            )
            return await cursor.fetchall()

    def get_subscribe_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        username = self.extract_channel_username()
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                        url=f"https://t.me/{username}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                        callback_data="check_sub"
                    )
                ]
            ]
        )

    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
                    InlineKeyboardButton(text="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="top_list")
                ],
                [
                    InlineKeyboardButton(
                        text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", 
                        switch_inline_query="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å—É!"
                    )
                ]
            ]
        )

    async def notify_admin(self, message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                await self.bot.send_message(ADMIN_ID, message)
                return
            except Exception as e:
                if attempt == max_retries - 1:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {str(e)}")
                await asyncio.sleep(2)

    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.dp.message(Command("start"))
        async def start(message: Message):
            try:
                if await self.check_participants_limit():
                    await message.answer(
                        "üèÜ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                        f"–ú—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - {MAX_PARTICIPANTS}!\n"
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ‚ù§Ô∏è"
                    )
                    return

                user = message.from_user
                await self.add_participant(user)

                args = message.text.split()
                if len(args) > 1 and args[1].startswith("ref"):
                    referrer_id = int(args[1][3:])
                    if referrer_id != user.id:
                        await self.add_referral(referrer_id, user.id)
                        await self.notify_admin(f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user.first_name}")

                if not await self.is_user_subscribed(user.id):
                    await message.answer(
                        "üì¢ –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {MAX_PARTICIPANTS - self.current_participants}",
                        reply_markup=self.get_subscribe_keyboard()
                    )
                    return

                bot_username = (await self.bot.me()).username
                ref_link = f"https://t.me/{bot_username}?start=ref{user.id}"
                
                await message.answer(
                    f"üè° <b>–†–æ–∑—ã–≥—Ä—ã—à –∞–∫—Ü–∏–π –ü–ò–ö!</b>\n\n"
                    f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n\n"
                    f"üèÜ <b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b>\n"
                    f"ü•á 1 –º–µ—Å—Ç–æ: 3 –∞–∫—Ü–∏–∏ –ü–ò–ö (~1,050 —Ä—É–±)\n"
                    f"ü•à 2 –º–µ—Å—Ç–æ: 2 –∞–∫—Ü–∏–∏ –ü–ò–ö (~700 —Ä—É–±)\n"
                    f"ü•â 3 –º–µ—Å—Ç–æ: 1 –∞–∫—Ü–∏—è –ü–ò–ö (~350 —Ä—É–±)\n\n"
                    f"üìå <b>–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å—ã:</b>\n"
                    f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ\n"
                    f"‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = +1 –±–∞–ª–ª\n\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - self.current_participants}\n"
                    f"üìÖ <b>–ò—Ç–æ–≥–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:</b> –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {MAX_PARTICIPANTS} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    reply_markup=self.get_main_keyboard()
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {str(e)}")
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @self.dp.callback_query(F.data == "check_sub")
        async def check_subscription(callback_query: CallbackQuery):
            try:
                user = callback_query.from_user
                
                if await self.is_user_subscribed(user.id):
                    await callback_query.message.edit_reply_markup(reply_markup=None)
                    bot_username = (await self.bot.me()).username
                    ref_link = f"https://t.me/{bot_username}?start=ref{user.id}"
                    
                    await callback_query.message.answer(
                        f"‚úÖ <b>{user.first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!</b>\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.\n\n"
                        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}",
                        reply_markup=self.get_main_keyboard()
                    )
                    await callback_query.answer()
                else:
                    await callback_query.answer(
                        "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!\n\n"
                        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª'\n"
                        "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
                        "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                        show_alert=True
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
                await callback_query.answer(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )

        @self.dp.callback_query(F.data == "my_stats")
        async def show_stats(callback_query: CallbackQuery):
            try:
                stats = await self.get_user_stats(callback_query.from_user.id)
                bot_username = (await self.bot.me()).username
                ref_link = f"https://t.me/{bot_username}?start=ref{callback_query.from_user.id}"
                
                await callback_query.message.answer(
                    f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                    f"üë§ ID: <code>{callback_query.from_user.id}</code>\n"
                    f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{stats['referrals']}</b>\n"
                    f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: <b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n"
                    f"üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{ref_link}</code>\n\n"
                    f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - self.current_participants}",
                    reply_markup=self.get_main_keyboard()
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

        @self.dp.callback_query(F.data == "top_list")
        async def show_top(callback_query: CallbackQuery):
            try:
                top_users = await self.get_top_referrers()
                text = "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
                
                if top_users:
                    for i, (uid, username, first_name, refs) in enumerate(top_users, 1):
                        name = f"@{username}" if username else first_name
                        text += f"{i}. {name}: <b>{refs}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                else:
                    text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö."
                    
                text += f"\n‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç:</b> {MAX_PARTICIPANTS - self.current_participants}"
                
                await callback_query.message.answer(
                    text,
                    reply_markup=self.get_main_keyboard()
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–ø–∞: {str(e)}")
                await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞", show_alert=True)

    async def on_startup(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
            me = await self.bot.get_me()
            logger.info(f"–ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ API")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
            channel_info = await self.get_channel_info()
            if not channel_info:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
                logger.error(error_msg)
                await self.notify_admin(error_msg)
                raise Exception(error_msg)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
            bot_member = await self.bot.get_chat_member(channel_info['chat_id'], me.id)
            if bot_member.status not in ['administrator', 'creator']:
                error_msg = "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!"
                logger.error(error_msg)
                await self.notify_admin(error_msg)
                raise Exception(error_msg)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await self.init_db()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            members_count = await self.get_chat_members_count()
            await self.notify_admin(
                "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: {GROUP_LINK}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members_count}\n"
                f"üèÜ –õ–∏–º–∏—Ç: {MAX_PARTICIPANTS}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
            raise

    async def on_shutdown(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏"""
        try:
            await self.notify_admin("üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}")
        finally:
            await self.bot.session.close()

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.on_startup()
        await self.setup_handlers()
        try:
            await self.dp.start_polling(self.bot)
        finally:
            await self.on_shutdown()

if __name__ == "__main__":
    bot = ContestBot()
    asyncio.run(bot.run())
